// Mocks generated by Mockito 5.4.4 from annotations
// in crypto_test/test/repository/transaction_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:crypto_test/core/services/networking_service/network_service.dart'
    as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRequestOptions_0 extends _i1.SmartFake
    implements _i2.RequestOptions {
  _FakeRequestOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStackTrace_1 extends _i1.SmartFake implements StackTrace {
  _FakeStackTrace_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioException_2 extends _i1.SmartFake implements _i2.DioException {
  _FakeDioException_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i3.NetworkService {
  @override
  _i4.Future<dynamic> getData({required dynamic url}) => (super.noSuchMethod(
        Invocation.method(
          #getData,
          [],
          {#url: url},
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}

/// A class which mocks [DioException].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioException extends _i1.Mock implements _i2.DioException {
  @override
  _i2.RequestOptions get requestOptions => (super.noSuchMethod(
        Invocation.getter(#requestOptions),
        returnValue: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
        returnValueForMissingStub: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
      ) as _i2.RequestOptions);

  @override
  _i2.DioExceptionType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.DioExceptionType.connectionTimeout,
        returnValueForMissingStub: _i2.DioExceptionType.connectionTimeout,
      ) as _i2.DioExceptionType);

  @override
  StackTrace get stackTrace => (super.noSuchMethod(
        Invocation.getter(#stackTrace),
        returnValue: _FakeStackTrace_1(
          this,
          Invocation.getter(#stackTrace),
        ),
        returnValueForMissingStub: _FakeStackTrace_1(
          this,
          Invocation.getter(#stackTrace),
        ),
      ) as StackTrace);

  @override
  _i2.DioException copyWith({
    _i2.RequestOptions? requestOptions,
    _i2.Response<dynamic>? response,
    _i2.DioExceptionType? type,
    Object? error,
    StackTrace? stackTrace,
    String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #requestOptions: requestOptions,
            #response: response,
            #type: type,
            #error: error,
            #stackTrace: stackTrace,
            #message: message,
          },
        ),
        returnValue: _FakeDioException_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #requestOptions: requestOptions,
              #response: response,
              #type: type,
              #error: error,
              #stackTrace: stackTrace,
              #message: message,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDioException_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #requestOptions: requestOptions,
              #response: response,
              #type: type,
              #error: error,
              #stackTrace: stackTrace,
              #message: message,
            },
          ),
        ),
      ) as _i2.DioException);
}
